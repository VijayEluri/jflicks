<project name="jflicks" default="build" basedir=".">

    <!--
        Setup all properties that are needed.
    -->
    <property environment="env"/>
    <property name="src" location="src"/>
    <property name="build" location="build"/>
    <property name="dist" location="dist"/>
    <property name="lib" location="lib"/>
    <property name="tools" location="tools"/>
    <property name="bundle" location="bundle"/>
    <property name="bnd" location="bnd"/>
    <property name="docs" location="docs"/>
    <property file="local.properties"/>

    <taskdef resource="aQute/bnd/ant/taskdef.properties"
        classpath="${tools}/bnd-0.0.384.jar"/>

    <taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask"
        classpath="${tools}/jarjar-1.0.jar"/>

    <!--
        Make a build classpath for our code.
    -->
    <path id="build.classpath">

        <fileset dir="${dist}" includes="*.jar" />
        <fileset dir="${lib}" includes="*.jar" />
        <fileset dir="${env.JAVA_HOME}/jre/lib" includes="jfxrt.jar" />

    </path>

    <path id="runtime.classpath">

        <fileset dir="${dist}" includes="jflicks-test.jar" />
        <fileset dir="${lib}" includes="*.jar" />
        <fileset dir="${bundle}" includes="*.jar" />
        <fileset dir="${env.JAVA_HOME}/jre/lib" includes="jfxrt.jar" />

    </path>

    <!--
        Initialize some work directories for generation of source code
        and for building to class files and jars.
    -->
    <target name="init">

        <mkdir dir="${build}"/>
        <mkdir dir="${dist}"/>
        <mkdir dir="${bundle}"/>
        <mkdir dir="${docs}"/>

    </target>

    <!--
        The main build target.  It calls the generated code builds, then
        does an init and build iota proper and places compiled classes
        into one jar file.
    -->
    <target name="build" depends="init" description="Build everything and jar">

        <javac srcdir="${src}" destdir="${build}" classpathref="build.classpath"
            debug="on" includes="**/*.java" excludes="**/package-info.java*"
            includeantruntime="false">

        </javac>

        <jar destfile="${dist}/jflicks.jar" basedir="${build}"
            excludes="org/jflicks/**/test/*.class">
        </jar>

        <jar destfile="${dist}/jflicks_hdhr_config.jar" basedir="${build}"
            includes="org/jflicks/tv/recorder/jhdhr/*.class,com/**">
        </jar>

        <jar destfile="${dist}/jflicks-4android.jar" basedir="${build}"
            includes="org/jflicks/tv/*.class,org/jflicks/nms/*.class,org/jflicks/util/*.class,org/jflicks/configure/*.class">
        </jar>

        <jar destfile="${dist}/jflicks-test.jar" basedir="${build}">
        </jar>

        <jar destfile="${dist}/directvweb.jar" basedir="${build}"
            excludes="**/test/*.class"
            includes="**/stb/*.class,**/stb/directvweb/*.class,**/util/*.class">

            <manifest>
                <attribute name="Main-Class"
                    value="org.jflicks.stb.directvweb.DirectvWeb"/>
            </manifest>

        </jar>

        <jar destfile="${dist}/teststreamjob.jar" basedir="${build}"
            excludes="**/test/*.class"
            includes="**/recorder/*.class,**/job/*.class,**/util/*.class">

            <manifest>
                <attribute name="Main-Class"
                    value="org.jflicks.tv.recorder.StreamJob"/>
            </manifest>

        </jar>

        <jar destfile="${dist}/jflicks-update.jar" basedir="${build}"
            excludes="**/test/*.class">

            <zipfileset includes="**/*.class" src="lib/jdom.jar"/>
            <zipfileset includes="**/*.class" src="lib/commons-io-2.4.jar"/>
            <manifest>
                <attribute name="Main-Class"
                    value="org.jflicks.update.system.SystemUpdate"/>
            </manifest>

        </jar>

        <jarjar jarfile="${dist}/schedules_direct_json.jar">

            <fileset dir="${build}">
                <include name="org/jflicks/tv/programdata/sd/json/*"/>
            </fileset>

            <zipfileset src="${lib}/commons-codec-1.9.jar"/>
            <zipfileset src="${lib}/gson-2.4.jar"/>
            <zipfileset src="${lib}/org.restlet.jar"/>
            <zipfileset src="${lib}/org.restlet.ext.json.jar"/>
            <zipfileset src="${lib}/org.json.jar"/>

            <manifest>
                <attribute name="Main-Class" value="org.jflicks.tv.programdata.sd.json.Manage" />
            </manifest>

        </jarjar>

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-base.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-stream-http.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-tv-programdata-sd.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-tv-recorder-hdhr.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-tv-recorder-jhdhr.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-tv-recorder-v4l2.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-tv-recorder-dvb.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-tv-scheduler-system.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-tv-live-system.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-cleaner-ray.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-videomanager-system.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-videomanager-yamj.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-autoart-system.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-tv-postproc-system.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-tv-postproc-worker-comskip.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-tv-postproc-worker-comrat.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-tv-postproc-worker-comsilentblack.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-tv-postproc-worker-mediainfo.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-tv-postproc-worker-ffmpegscreenshot.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-tv-postproc-worker-indexer.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-tv-postproc-worker-passthru.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-tv-postproc-worker-projectx.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-metadata-themoviedb.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-metadata-thetvdb.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-nms-system.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-nms-remote.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-player-mplayer-video.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-player-mplayer-video-transport-stream.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-player-mplayer-video-program-stream.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-player-mplayer-video-stream-udp.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-player-vlcj-video.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-player-vlcj-video-stream-udp.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-player-vlcdvd.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-player-photoshow.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-ui.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-ui-view.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-ui-view-aspirin.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-ui-view-aspirin-analyze.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-ui-view-aspirin-analyze-path.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-ui-view-aspirin-analyze-schedulesdirect.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-ui-view-aspirin-analyze-lirc.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-ui-view-advanced.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-ui-view-ez.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-ui-view-j4cc.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-ui-view-scheduler.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-ui-view-server.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-ui-view-metadata.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-ui-view-vm.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-ui-view-fe.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-ui-view-fe-screen.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-ui-view-fe-screen-dvd.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-ui-view-fe-screen-livetv.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-ui-view-fe-screen-systemstatus.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-ui-view-fe-screen-preference.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-ui-view-fe-screen-preview.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-ui-view-fe-screen-recording.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-ui-view-fe-screen-schedule.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-ui-view-fe-screen-script.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-ui-view-fe-screen-video.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-rc-lirc.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-rc-lirc-32.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-rc-winlirc.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-imagecache-system.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-trailer-apple.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-transfer-system.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-nativeutil.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-update-system.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-restlet-base.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-restlet-servercomponent-system.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-restlet-nms.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${lib}/jdom.jar"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-jdom.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${lib}/jna-3.5.2.jar"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-jna.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${lib}/platform-3.5.2.jar"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-platform.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${lib}/swingx-1.6.jar"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-swingx.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${lib}/timingframework-swing-4.1.jar"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-timingframework.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${lib}/thetvdbapi.jar"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-thetvdbapi.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${build}"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-themoviedbapi.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${lib}/sqlitejdbc-v056.jar"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-sqlitejdbc.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${lib}/xstream-1.4.2.jar"
            eclipse="false"
            failok="false"
            exceptions="true"
            files="${bnd}/jflicks-xstream.bnd"
            output="${bundle}"
        />

        <bnd
            classpath="${lib}/org.restlet.jar:${lib}/org.restlet.ext.wadl.jar:${lib}/org.restlet.ext.xml.jar:${lib}/org.restlet.ext.freemarker.jar:${lib}/org.freemarker.jar:${lib}/org.restlet.ext.json.jar:${lib}/org.json.jar"
            eclipse="false"
            failok="true"
            exceptions="true"
            files="${bnd}/jflicks-restlet-all.bnd"
            output="${bundle}"
        />

    </target>

    <target name="check-felix-server" unless="felix.j4cc.server.home">

        <echo message="Felix server home is not defined!"/>

    </target>

    <target name="check-felix-client" unless="felix.j4cc.client.home">

        <echo message="Felix j4cc home is not defined!"/>

    </target>

    <target name="check-felix-fe" unless="felix.j4cc.fe.home">

        <echo message="Felix front end home is not defined!"/>

    </target>

    <target name="deploy" depends="build,check-felix-server,check-felix-client,check-felix-fe"
        description="Gotta do more than just compile!">

        <delete>
            <fileset dir="${felix.j4cc.server.home}/bundle" includes="jflicks-*" />
            <fileset dir="${felix.j4cc.client.home}/bundle" includes="jflicks-*" />
        </delete>

        <!-- First do server side. -->
        <copy todir="${felix.j4cc.server.home}/bundle">
            <fileset dir="${bundle}" includes="${j4cc.server.deploy}"/>
        </copy>

        <!-- Next do client side. -->
        <copy todir="${felix.j4cc.client.home}/bundle">
            <fileset dir="${bundle}" includes="${j4cc.client.deploy}"/>
        </copy>

    </target>

    <!--
        Freshen up.
    -->
    <target name="clean" description="There's hope when there's soap!">

        <delete dir="${build}"/>
        <delete dir="${dist}"/>
        <delete dir="${bundle}"/>

    </target>

    <!--
        Clean up everything.
    -->
    <target name="clean-all" depends="clean" description="Scrub away!">

        <delete dir="${docs}"/>

    </target>

    <target name="check-checkstyle" unless="checkstyle.home">

        <echo message="Checkstyle home is not defined!"/>

    </target>

    <target name="checkstyle" depends="build,check-checkstyle"
        if="checkstyle.home" description="Style matters!">

        <taskdef resource="checkstyletask.properties"
            classpath="${checkstyle.home}/checkstyle-all-5.0.jar"/>

        <echo message="${checkstyle.home}"/>

        <checkstyle config="${checks}" classpathref="build.classpath">

            <fileset dir="src" includes="**/*.java" excludes="**/test/*.java" />

        </checkstyle>

    </target>

    <target name="check-findbugs" unless="findbugs.home">

        <echo message="findbugs is not defined!"/>

    </target>

    <target name="findbugs" depends="build,check-findbugs"
        if="findbugs.home" description="Zap bugs!">

        <taskdef name="findbugs"
            classpath="${findbugs.home}/lib/findbugs-ant.jar" 
            classname="edu.umd.cs.findbugs.anttask.FindBugsTask"/>

        <findbugs home="${findbugs.home}"
            output="${findbugs.output}"
            stylesheet="${findbugs.stylesheet}.xsl"
            outputFile="${findbugs.file}"
            reportLevel="medium"
            jvmargs="-Xmx1500m">

            <auxClasspath>
                <fileset dir="${lib}" includes="**/*.jar"/>
            </auxClasspath>

            <sourcePath path="${src}"/>
            <class location="${dist}/jflicks.jar"/>

        </findbugs>

    </target>

    <target name="serialver" depends="build">

        <input message="classname: " addproperty="arg1"
            defaultvalue="org.jflicks."/>
        <exec executable="serialver">
            <arg value="-classpath"/>
            <arg value="${build}"/>
            <arg value="${arg1}"/>
        </exec>

    </target>

    <target name="stream-send" depends="build">

        <java classname="org.jflicks.nms.StreamFileJob" fork="true">

            <classpath>
                <path refid="runtime.classpath"/>
            </classpath>

        </java>

    </target>

    <target name="test-sdjson-client" depends="build">

        <java classname="org.jflicks.tv.programdata.sd.json.Client" fork="true">

            <classpath>
                <path refid="runtime.classpath"/>
            </classpath>

        </java>

    </target>

    <target name="test-sdjson" depends="build">

        <java classname="org.jflicks.tv.programdata.sd.json.Manage"
            fork="true">

            <arg value="-u"/>
            <arg value="${sduser}"/>
            <arg value="-p"/>
            <arg value="${sdpass}"/>
            <arg value="-l"/>
            <arg value="${sdlocation}"/>
            <arg value="-zipcode"/>
            <arg value="${sdzip}"/>
            <arg value="-action"/>
            <arg value="listAddedLineups"/>
            <!--
            <arg value="listAddedLineups"/>
            <arg value="listStations"/>
            <arg value="program"/>
            <arg value="listAllLineups"/>
            <arg value="addLineup"/>
            <arg value="deleteLineup"/>
            <arg value="guide"/>
            -->
            <arg value="-lineup"/>
            <arg value="Local Over the Air Broadcast"/>
            <!--
            <arg value="USA-OTA-13492"/>
            <arg value="DIRECTV Albany"/>
            <arg value="Antenna"/>
            <arg value="Local"/>
            <arg value="Local Over the Air Broadcast"/>
            -->
            <arg value="-sid"/>
            <arg value="53158"/>
            <arg value="-sid"/>
            <arg value="34968"/>
            <arg value="-pid"/>
            <arg value="EP008298780289"/>

            <classpath>
                <path refid="runtime.classpath"/>
            </classpath>

        </java>

    </target>

    <target name="test-tmdb" depends="build">

        <java classname="org.jflicks.metadata.themoviedb.TheMovieDB"
            fork="true">

            <classpath>
                <path refid="runtime.classpath"/>
            </classpath>

        </java>

    </target>

    <target name="test-chapter-update" depends="build">

        <java classname="org.jflicks.util.chapter.ChapterUpdate" fork="true">

            <classpath>
                <path refid="runtime.classpath"/>
            </classpath>

            <arg value="/Users/djb/tmp/chaptertest"/>

        </java>

    </target>

    <target name="test-concat" depends="build">

        <java classname="org.jflicks.tv.recorder.ConcatJob" fork="true">

            <classpath>
                <path refid="runtime.classpath"/>
            </classpath>

        </java>

    </target>

    <target name="test-chapter-frame" depends="build">

        <java classname="org.jflicks.tv.postproc.worker.ChapterFrameJob" fork="true">

            <classpath>
                <path refid="runtime.classpath"/>
            </classpath>

        </java>

    </target>

    <target name="test-silent-black" depends="build">

        <java classname="org.jflicks.tv.postproc.worker.comsilentblack.ComSilentBlackJob" fork="true">

            <classpath>
                <path refid="runtime.classpath"/>
            </classpath>

        </java>

    </target>

    <target name="test-hls" depends="build">

        <java classname="org.jflicks.tv.recorder.HlsJob" fork="true">

            <classpath>
                <path refid="runtime.classpath"/>
            </classpath>

        </java>

    </target>

    <target name="test-jfx" depends="build">

        <java classname="org.jflicks.util.jfx.VideoPlayer" fork="true">

            <classpath>
                <path refid="runtime.classpath"/>
            </classpath>

        </java>

    </target>

    <target name="test-detect" depends="build">

        <input message="path" addproperty="arg1"
            defaultvalue="/Users/djb/dtest/tank"/>
        <!--
        <input message="type:red:green:blue:range " addproperty="arg2"
            defaultvalue="1:14:105:132:70"/>
        <input message="type:red:green:blue:range " addproperty="arg2"
            defaultvalue="1:0:0:0:70"/>
        <input message="type:red:green:blue:range " addproperty="arg2"
            defaultvalue="0:255:255:255:70"/>
        -->
        <input message="type:red:green:blue:range " addproperty="arg2"
            defaultvalue="0:255:255:255:70,1:0:0:0:70,1:14:105:132:70,0:82:188:56:100,0:220:229:235:70"/>
        <input message="extension: " addproperty="arg3" defaultvalue="jpg"/>
        <input message="verbose: " addproperty="arg4" defaultvalue="true"/>
        <java classname="org.jflicks.util.DetectRatingRectangle" fork="true">

            <arg value="-path"/>
            <arg value="${arg1}"/>
            <arg value="-type:red:green:blue:range"/>
            <arg value="${arg2}"/>
            <arg value="-extension"/>
            <arg value="${arg3}"/>
            <arg value="-verbose"/>
            <arg value="${arg4}"/>
            <classpath>
                <path refid="runtime.classpath"/>
            </classpath>

        </java>

    </target>

    <target name="test-vlcj" depends="build">

        <java classname="org.jflicks.player.vlcj.Vlcj" fork="true">

            <classpath>
                <path refid="runtime.classpath"/>
            </classpath>

        </java>

    </target>

    <target name="test-bif" depends="build">

        <java classname="org.jflicks.util.Bif" fork="true">

            <classpath>
                <path refid="runtime.classpath"/>
            </classpath>

        </java>

    </target>

    <target name="test-directvweb" depends="build">

        <input message="host/ip: " addproperty="arg1"
            defaultvalue="192.168.2.140"/>
        <input message="port: " addproperty="arg2" defaultvalue="8080"/>
        <input message="channel: " addproperty="arg3" defaultvalue="202"/>
        <java classname="org.jflicks.stb.directvweb.DirectvWeb" fork="true">

            <arg value="-host"/>
            <arg value="${arg1}"/>
            <arg value="-port"/>
            <arg value="${arg2}"/>
            <arg value="-channel"/>
            <arg value="${arg3}"/>
            <jvmarg value="-Djava.library.path=lib"/>
            <classpath>
                <path refid="runtime.classpath"/>
            </classpath>

        </java>

    </target>

    <target name="test-hdhr-parse" depends="build">

        <java classname="org.jflicks.tv.recorder.hdhr.ParseScanFile" fork="true">

            <classpath>
                <path refid="runtime.classpath"/>
            </classpath>

        </java>

    </target>

    <target name="test-mp4parser" depends="build">

        <java classname="org.jflicks.util.frommpeg2.MetaDataTool" fork="true">

            <arg value="/Users/djb/test-j4cc/server/videooutput/tv/EP011581290107_2015_09_08_20_00.ts.mp4"/>
            <classpath>
                <path refid="runtime.classpath"/>
            </classpath>

        </java>

    </target>

    <target name="test-wadl" depends="build">

        <java classname="org.jflicks.restlet.nms.NMSApplication" fork="true">

            <classpath>
                <path refid="runtime.classpath"/>
            </classpath>

        </java>

    </target>

    <target name="test-bundle-tree" depends="build">

        <java classname="org.jflicks.update.system.BundleTree" fork="true">

            <classpath>
                <path refid="runtime.classpath"/>
            </classpath>

        </java>

    </target>

    <target name="test-util" depends="build">

        <java classname="org.jflicks.util.Util"
            fork="true">

            <classpath>
                <path refid="runtime.classpath"/>
            </classpath>

        </java>

    </target>

    <target name="test-from" depends="build">

        <java classname="org.jflicks.util.frommpeg2.FromMpeg2"
            fork="true">

            <arg value="/Users/djb/Movies"/>
            <classpath>
                <path refid="runtime.classpath"/>
            </classpath>

        </java>

    </target>

    <target name="javadoc" depends="build"
        description="Only thing better is the source!">

        <javadoc packagenames="org.*"
            destdir="${docs}"
            author="true"
            version="true"
            use="true"
            classpathref="runtime.classpath"
            verbose="false"
            windowtitle="jflicks media system">

            <fileset dir="${src}">
                <exclude name="**/Activator*.java"/>
                <include name="**/*.java"/>
            </fileset>

            <doctitle><![CDATA[<h1>jflicks media system</h1>]]></doctitle>
            <bottom><![CDATA[<i>jflicks media system</i>]]></bottom>

        </javadoc>

    </target>

</project>

